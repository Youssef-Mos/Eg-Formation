// components/providers/SecureSessionProvider.tsx
'use client';

import { SessionProvider } from "next-auth/react";
import { useSessionMonitor } from "@/app/hooks/useSessionMonitor";
import { useEffect, useRef } from "react";
import { toast } from "sonner";

interface SecureSessionProviderProps {
  children: React.ReactNode;
  session?: any;
}

// Composant de surveillance interne
function SessionMonitorWrapper({ children }: { children: React.ReactNode }) {
  const { isSessionValid, status } = useSessionMonitor({
    enabled: true,
    warningMinutes: 5,
    checkInterval: 30000 // 30 secondes
  });

  const isInitializedRef = useRef(false);
  const legitimateOperationsRef = useRef(new Set<string>());

  // Surveillance des tentatives de manipulation du localStorage
  useEffect(() => {
    // Marquer comme initialis√© apr√®s un d√©lai pour permettre √† NextAuth de s'initialiser
    const initTimer = setTimeout(() => {
      isInitializedRef.current = true;
    }, 2000);

    const handleStorageAttack = (operation: string, key: string) => {
      console.warn(`üö® Tentative de manipulation suspecte d√©tect√©e: ${operation} sur ${key}`);
      toast.error("Activit√© suspecte d√©tect√©e. Veuillez vous reconnecter.");
    };

    // Fonction pour v√©rifier si une op√©ration est suspecte
    const isSuspiciousOperation = (key: string, operation: string): boolean => {
      // Pendant l'initialisation, permettre toutes les op√©rations NextAuth
      if (!isInitializedRef.current) {
        return false;
      }

      // ‚úÖ LISTE √âLARGIE DES CL√âS AUTORIS√âES
      const allowedKeys = [
        // NextAuth
        'next-auth.session-token',
        'next-auth.csrf-token',
        'next-auth.callback-url',
        'next-auth.pkce.code_verifier',
        // Cookies Consent
        'cookie-consent',
        // Pr√©f√©rences utilisateur l√©gitimes
        'theme',
        'language',
        'user-preferences',
        // Analytics (si consentement donn√©)
        '_ga',
        '_gid',
        '_gat',
        // Autres cl√©s d'application l√©gitimes
        'app-settings',
        'ui-state',
        'tour-completed',
        'notification-settings', 
        
      ];

      // Si c'est une cl√© autoris√©e, ce n'est pas suspect
      if (allowedKeys.some(allowedKey => 
        key === allowedKey || 
        key.includes(allowedKey) ||
        allowedKey.includes(key)
      )) {
        return false;
      }

      // ‚ö†Ô∏è PATTERNS VRAIMENT SUSPECTS SEULEMENT
      const sensitivePatterns = [
        /nextauth.*session.*admin/i,  // Tentative d'√©l√©vation de privil√®ges
        /auth.*secret.*key/i,         // Cl√©s secr√®tes
        /session.*override/i,         // Tentative de override de session
        /token.*bypass/i,             // Tentative de bypass de tokens
        /<script/i,                   // Injection de script
        /javascript:/i,               // Protocole javascript
        /data:.*base64/i              // Data URL suspects
      ];

      const matchesSuspiciousPattern = sensitivePatterns.some(pattern => 
        pattern.test(key) || pattern.test(JSON.stringify(arguments))
      );

      if (matchesSuspiciousPattern) {
        console.log(`üîç Cl√© suspecte d√©tect√©e: ${key}`);
        return true;
      }

      // ‚úÖ Par d√©faut, autoriser (approche permissive pour l'UX)
      return false;
    };

    // Surveillance des modifications non autoris√©es
    const originalSetItem = localStorage.setItem;
    const originalRemoveItem = localStorage.removeItem;
    const originalGetItem = localStorage.getItem;
    const originalClear = localStorage.clear;

    localStorage.setItem = function(key: string, value: string) {
      if (isSuspiciousOperation(key, 'setItem')) {
        handleStorageAttack('setItem', key);
        return;
      }
      return originalSetItem.apply(this, [key, value]);
    };

    localStorage.removeItem = function(key: string) {
      if (isSuspiciousOperation(key, 'removeItem')) {
        handleStorageAttack('removeItem', key);
        return;
      }
      return originalRemoveItem.apply(this, [key]);
    };

    // ‚úÖ Ne pas intercepter getItem pour √©viter les probl√®mes de lecture
    // localStorage.getItem reste intact pour une meilleure compatibilit√©

    localStorage.clear = function() {
      // Permettre clear() seulement si initi√© par NextAuth, app l√©gitime ou pendant la d√©connexion
      if (isInitializedRef.current) {
        const stack = new Error().stack;
        const legitimateClearSources = [
          'next-auth',
          'signOut',
          'cookie-consent', // ‚úÖ Autoriser clear pour les cookies
          'logout',
          'clearUserData'
        ];
        
        const isLegitimate = legitimateClearSources.some(source => 
          stack?.includes(source)
        );
        
        if (!isLegitimate) {
          console.warn("üö® Tentative de clear() non autoris√©e");
          handleStorageAttack('clear', 'all');
          return;
        }
      }
      return originalClear.apply(this);
    };

    // Surveillance des tentatives de modification des cookies (version all√©g√©e)
    const originalCookieDescriptor = Object.getOwnPropertyDescriptor(Document.prototype, 'cookie');
    if (originalCookieDescriptor) {
      Object.defineProperty(document, 'cookie', {
        get: originalCookieDescriptor.get,
        set: function(value: string) {
          // ‚úÖ Surveillance plus cibl√©e des cookies
          if (value.includes("next-auth") || value.includes("session")) {
            // V√©rifier SEULEMENT les manipulations vraiment dangereuses
            const dangerousPatterns = [
              /<script/i,                    // Injection XSS
              /javascript:/i,               // Protocole javascript
              /data:.*base64.*script/i,     // Data URL avec script
              /\.\.\/\.\.\//,               // Path traversal
              /admin.*=.*true/i             // Tentative d'√©l√©vation admin
            ];
            
            if (dangerousPatterns.some(pattern => pattern.test(value))) {
              console.warn("üö® Tentative de manipulation dangereuse des cookies");
              toast.error("Manipulation dangereuse des cookies d√©tect√©e.");
              return;
            }
          }
          return originalCookieDescriptor.set?.call(this, value);
        },
        configurable: true
      });
    }

    return () => {
      clearTimeout(initTimer);
      // Restaurer les m√©thodes originales
      localStorage.setItem = originalSetItem;
      localStorage.removeItem = originalRemoveItem;
      localStorage.getItem = originalGetItem;
      localStorage.clear = originalClear;
      
      if (originalCookieDescriptor) {
        Object.defineProperty(document, 'cookie', originalCookieDescriptor);
      }
    };
  }, []);

  // Surveillance de l'int√©grit√© de la session (version optimis√©e)
  useEffect(() => {
    const checkSessionIntegrity = () => {
      // Attendre que NextAuth soit initialis√©
      if (!isInitializedRef.current) return;

      try {
        // V√©rifier si les tokens de session sont coh√©rents
        const sessionToken = document.cookie
          .split(';')
          .find(row => row.trim().startsWith('next-auth.session-token'));
        
        const csrfToken = document.cookie
          .split(';')
          .find(row => row.trim().startsWith('next-auth.csrf-token'));

        // V√©rification plus nuanc√©e de l'int√©grit√©
        if (sessionToken && !csrfToken) {
          console.warn("üö® Token CSRF manquant");
          // D√©lai plus long pour laisser NextAuth se synchroniser
          setTimeout(() => {
            const recheckCsrf = document.cookie
              .split(';')
              .find(row => row.trim().startsWith('next-auth.csrf-token'));
            
            if (!recheckCsrf) {
              toast.error("Erreur de s√©curit√© d√©tect√©e. Reconnexion requise.");
              window.location.href = "/api/auth/signout";
            }
          }, 10000); // 10 secondes au lieu de 5
        }

        // V√©rifier la validit√© du format des tokens
        if (sessionToken) {
          const tokenValue = sessionToken.split('=')[1];
          if (tokenValue && (tokenValue.length < 10 || tokenValue.includes('<script'))) {
            console.warn("üö® Format de token suspect d√©tect√©");
            toast.error("Token de session invalide d√©tect√©.");
            window.location.href = "/api/auth/signout";
          }
        }
      } catch (error) {
        console.error("Erreur lors de la v√©rification d'int√©grit√©:", error);
        // ‚úÖ Ne pas bloquer l'app en cas d'erreur de v√©rification
      }
    };

    // V√©rification p√©riodique de l'int√©grit√© (moins fr√©quente pour les performances)
    const integrityInterval = setInterval(checkSessionIntegrity, 3 * 60 * 1000); // 3 minutes

    return () => clearInterval(integrityInterval);
  }, []);

  return <>{children}</>;
}

export default function SecureSessionProvider({ 
  children, 
  session 
}: SecureSessionProviderProps) {
  return (
    <SessionProvider 
      session={session}
      // Configuration de s√©curit√© renforc√©e
      refetchInterval={5 * 60} // Actualisation toutes les 5 minutes
      refetchOnWindowFocus={true} // Actualiser au focus de la fen√™tre
      refetchWhenOffline={false}
    >
      <SessionMonitorWrapper>
        {children}
      </SessionMonitorWrapper>
    </SessionProvider>
  );
}