// app/api/reservation/create-without-payment/route.ts
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import nodemailer from "nodemailer"; // ‚úÖ AJOUT

const prisma = new PrismaClient();

export async function POST(request: Request) {
  // V√©rifier l'authentification
  const session = await getServerSession(authOptions);
  if (!session || !session.user) {
    return NextResponse.json(
      { error: "Vous devez √™tre connect√© pour effectuer une r√©servation" },
      { status: 401 }
    );
  }

  try {
    // R√©cup√©rer les donn√©es de la requ√™te
    const { stageId, userId, typeStage, paymentMethod } = await request.json();

    // V√©rifications de base
    if (!stageId || !userId || !typeStage || !paymentMethod) {
      return NextResponse.json(
        { error: "Donn√©es de r√©servation incompl√®tes" },
        { status: 400 }
      );
    }

    // V√©rifier que l'ID utilisateur est coh√©rent avec la session
    if (userId !== Number(session.user.id)) {
      return NextResponse.json(
        { error: "ID utilisateur non autoris√©" },
        { status: 403 }
      );
    }

    // ‚úÖ AJOUT : R√©cup√©rer les d√©tails du stage AVEC l'agr√©ment
    const stage = await prisma.stage.findUnique({
      where: { id: Number(stageId) },
      include: {
        agrement: true
      }
    });

    if (!stage) {
      return NextResponse.json(
        { error: "Stage non trouv√©" },
        { status: 404 }
      );
    }

    if (stage.PlaceDisponibles <= 0) {
      return NextResponse.json(
        { error: "Plus de places disponibles pour ce stage" },
        { status: 400 }
      );
    }

    // V√©rifier si l'utilisateur a d√©j√† r√©serv√© ce stage
    const existingReservation = await prisma.reservation.findUnique({
      where: {
        userId_stageId: {
          userId: Number(userId),
          stageId: Number(stageId)
        }
      }
    });

    if (existingReservation) {
      return NextResponse.json(
        { error: "Vous avez d√©j√† r√©serv√© ce stage" },
        { status: 400 }
      );
    }

    // ‚úÖ AJOUT : R√©cup√©rer les informations utilisateur
    const user = await prisma.user.findUnique({
      where: { id: Number(userId) },
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true
      }
    });

    if (!user) {
      return NextResponse.json(
        { error: "Utilisateur non trouv√©" },
        { status: 404 }
      );
    }

    // Cr√©er la r√©servation
    const reservation = await prisma.reservation.create({
      data: {
        userId: Number(userId),
        stageId: Number(stageId),
        TypeStage: typeStage,
        paymentMethod: paymentMethod,
        paid: false // Paiement pas encore effectu√©
      }
    });

    // Mettre √† jour le nombre de places disponibles
    await prisma.stage.update({
      where: { id: Number(stageId) },
      data: {
        PlaceDisponibles: stage.PlaceDisponibles - 1
      }
    });

    // ‚úÖ AJOUT : Envoi d'email de notification de paiement requis
    try {
      console.log(`üìß Envoi de la notification de paiement √† ${user.email}...`);
      
      // Configuration du transporteur Gmail
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.MAIL_USER!,
          pass: process.env.MAIL_PASS!,
        },
      });

      // D√©terminer le type de stage pour l'email
      const stageTypeDescriptions = {
        "recuperation_points": "Stage volontaire - R√©cup√©ration de 4 points",
        "permis_probatoire": "Stage obligatoire (p√©riode probatoire)",
        "alternative_poursuites": "Stage en alternative √† la poursuite judiciaire",
        "peine_complementaire": "Peine compl√©mentaire ou sursis avec mise √† l'√©preuve"
      };

      const stageDescription = stageTypeDescriptions[typeStage as keyof typeof stageTypeDescriptions] || typeStage;

      // Informations d'agr√©ment
      const agrementInfo = stage.agrement 
        ? `üèõÔ∏è Agr√©ment : ${stage.agrement.numeroAgrement} (${stage.agrement.departement}${stage.agrement.nomDepartement ? ` - ${stage.agrement.nomDepartement}` : ''})`
        : '';

      // M√©thode de paiement en fran√ßais
      const paymentMethodFR = {
        'bank_transfer': 'Virement bancaire',
        'check': 'Ch√®que',
        'cash': 'Esp√®ces',
        'card': 'Carte bancaire'
      };

      const methodeFR = paymentMethodFR[paymentMethod as keyof typeof paymentMethodFR] || paymentMethod;

      const emailContent = `
Bonjour ${user.firstName} ${user.lastName},

Votre r√©servation pour le stage de s√©curit√© routi√®re a √©t√© enregistr√©e avec succ√®s !

üìã D√âTAILS DE VOTRE R√âSERVATION :
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìç Lieu : ${stage.Titre}
üìç Adresse : ${stage.Adresse}, ${stage.CodePostal} ${stage.Ville}
üìÖ Dates : du ${new Date(stage.DateDebut).toLocaleDateString('fr-FR')} au ${new Date(stage.DateFin).toLocaleDateString('fr-FR')}
‚è∞ Horaires : ${stage.HeureDebut}-${stage.HeureFin} / ${stage.HeureDebut2}-${stage.HeureFin2}
üî¢ Num√©ro de stage : ${stage.NumeroStage}
${agrementInfo ? `${agrementInfo}\n` : ''}üí∞ Prix : ${stage.Prix}‚Ç¨
üìã Type : ${stageDescription}
üí≥ M√©thode de paiement choisie : ${methodeFR}

üö® PAIEMENT REQUIS POUR FINALISER VOTRE INSCRIPTION
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è IMPORTANT : Votre place est r√©serv√©e, mais vous devez effectuer le paiement pour recevoir votre convocation officielle.

${paymentMethod === 'bank_transfer' ? `
üí∏ VIREMENT BANCAIRE :
‚Ä¢ Montant : ${stage.Prix}‚Ç¨
‚Ä¢ R√©f√©rence √† indiquer : ${user.lastName.toUpperCase()}_${stage.NumeroStage}
‚Ä¢ Coordonn√©es bancaires : [√Ä compl√©ter avec vos coordonn√©es]
` : ''}${paymentMethod === 'check' ? `
üìß CH√àQUE :
‚Ä¢ Montant : ${stage.Prix}‚Ç¨
‚Ä¢ √Ä l'ordre de : EG-FORMATIONS
‚Ä¢ R√©f√©rence au dos : ${user.lastName.toUpperCase()}_${stage.NumeroStage}
‚Ä¢ Adresse d'envoi : [√Ä compl√©ter avec votre adresse]
` : ''}${paymentMethod === 'cash' ? `
üíµ PAIEMENT EN ESP√àCES :
‚Ä¢ Montant : ${stage.Prix}‚Ç¨
‚Ä¢ Rendez-vous √† convenir
‚Ä¢ R√©f√©rence : ${user.lastName.toUpperCase()}_${stage.NumeroStage}
` : ''}${paymentMethod === 'card' ? `
üí≥ PAIEMENT PAR CARTE :
‚Ä¢ Montant : ${stage.Prix}‚Ç¨
‚Ä¢ Lien de paiement s√©curis√© √† suivre
‚Ä¢ R√©f√©rence : ${user.lastName.toUpperCase()}_${stage.NumeroStage}
` : ''}

üìã PROCHAINES √âTAPES :
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

1Ô∏è‚É£ Effectuez le paiement selon la m√©thode choisie
2Ô∏è‚É£ Nous validons votre paiement (sous 48h)
3Ô∏è‚É£ Vous recevez votre convocation officielle par email
4Ô∏è‚É£ Pr√©sentez-vous le jour J avec votre convocation et vos documents

‚è∞ D√âLAI DE PAIEMENT :
Merci d'effectuer le paiement dans les 7 jours suivant cette r√©servation pour conserver votre place.

üìû CONTACT :
En cas de question, contactez-nous au 0783372565.

Cordialement,
L'√©quipe EG-FORMATIONS

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
N¬∞ de r√©servation : ${reservation.id}
Date de r√©servation : ${new Date().toLocaleDateString('fr-FR')}
      `;

      // Envoyer l'email avec copie au propri√©taire
      await transporter.sendMail({
        from: `"EG-FORMATIONS" <${process.env.MAIL_USER}>`,
        to: user.email,
        cc: process.env.MAIL_USER, // ‚úÖ Propri√©taire en copie
        subject: `üö® Paiement requis - Stage ${stage.Ville} (${stage.NumeroStage})`,
        text: emailContent,
        html: emailContent.replace(/\n/g, '<br>').replace(/‚îÅ/g, '‚îÄ'),
      });

      console.log(`‚úÖ Email de notification de paiement envoy√© √†: ${user.email} (copie √†: ${process.env.MAIL_USER})`);
      
    } catch (emailError) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email de paiement:', emailError);
      // On continue m√™me si l'email √©choue - la r√©servation est cr√©√©e
    }

    return NextResponse.json({
      success: true,
      message: "R√©servation cr√©√©e avec succ√®s. Un email avec les instructions de paiement vous a √©t√© envoy√©.",
      reservation: {
        id: reservation.id,
        userId: reservation.userId,
        stageId: reservation.stageId,
        TypeStage: reservation.TypeStage,
        paymentMethod: reservation.paymentMethod,
        paid: reservation.paid,
        createdAt: reservation.createdAt
      }
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la r√©servation:", error);
    return NextResponse.json(
      { error: "Erreur serveur lors de la cr√©ation de la r√©servation" },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}