// hooks/useSessionMonitor.ts
'use client';

import { useSession, signOut } from "next-auth/react";
import { useEffect, useCallback, useRef } from "react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

interface UseSessionMonitorOptions {
  enabled?: boolean;
  warningMinutes?: number;
  checkInterval?: number;
}

export function useSessionMonitor({
  enabled = true,
  warningMinutes = 5,
  checkInterval = 60000 // ‚úÖ Augment√© √† 1 minute pour √©viter spam
}: UseSessionMonitorOptions = {}) {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  // ‚úÖ √âtats pour √©viter les actions r√©p√©titives
  const warningShown = useRef(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const isHandlingExpiration = useRef(false); // ‚úÖ NOUVEAU : √âviter les boucles
  const lastCheck = useRef<number>(0); // ‚úÖ NOUVEAU : √âviter les v√©rifications trop fr√©quentes

  const handleSessionExpired = useCallback(async () => {
    // ‚úÖ √âviter les appels multiples simultan√©s
    if (isHandlingExpiration.current) {
      console.log("üü° D√©connexion d√©j√† en cours, ignor√©");
      return;
    }

    // ‚úÖ V√©rifier qu'on est vraiment connect√© avant de d√©connecter
    if (status !== "authenticated") {
      console.log("üü° Utilisateur d√©j√† d√©connect√©, ignor√©");
      return;
    }

    isHandlingExpiration.current = true;
    console.log("üî¥ Session expir√©e - d√©connexion automatique");
    
    // ‚úÖ Arr√™ter imm√©diatement la surveillance
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }

    try {
      toast.error("Votre session a expir√©. Redirection vers la connexion...", {
        duration: 3000
      });
      
      await signOut({ 
        redirect: false,
        callbackUrl: "/login?error=session_expired"
      });
      
      // ‚úÖ D√©lai avant redirection pour √©viter les conflits
      setTimeout(() => {
        router.push("/login?error=session_expired");
      }, 1000);
      
    } catch (error) {
      console.error("Erreur lors de la d√©connexion:", error);
      // ‚úÖ Force refresh seulement en cas d'erreur
      window.location.href = "/login?error=session_expired";
    } finally {
      // ‚úÖ Reset apr√®s un d√©lai pour √©viter les rappels imm√©diats
      setTimeout(() => {
        isHandlingExpiration.current = false;
      }, 5000);
    }
  }, [router, status]);

  const handleSessionWarning = useCallback(() => {
    // ‚úÖ V√©rifier qu'on est toujours connect√© avant d'avertir
    if (status !== "authenticated" || warningShown.current) {
      return;
    }

    console.log("‚ö†Ô∏è Avertissement d'expiration de session");
    warningShown.current = true;

    toast.warning(
      `Votre session expire dans ${warningMinutes} minutes.`,
      {
        duration: 8000,
        action: {
          label: "Prolonger",
          onClick: async () => {
            try {
              const response = await fetch("/api/auth/session", { 
                method: "GET",
                cache: "no-store" 
              });
              
              if (response.ok) {
                toast.success("Session prolong√©e avec succ√®s");
                warningShown.current = false;
              }
            } catch (error) {
              console.error("Erreur lors du prolongement:", error);
            }
          }
        }
      }
    );
  }, [warningMinutes, status]);

  const checkSessionValidity = useCallback(() => {
    const now = Date.now();
    
    // ‚úÖ √âviter les v√©rifications trop fr√©quentes (max toutes les 30 secondes)
    if (now - lastCheck.current < 30000) {
      return;
    }
    lastCheck.current = now;

    // ‚úÖ Ne v√©rifier que si on est vraiment connect√©
    if (status !== "authenticated" || !session?.expires) {
      return;
    }

    // ‚úÖ √âviter les v√©rifications si d√©connexion en cours
    if (isHandlingExpiration.current) {
      return;
    }

    const expiryTime = new Date(session.expires).getTime();
    const timeUntilExpiry = expiryTime - now;

    // ‚úÖ Log moins verbeux
    if (timeUntilExpiry > 0) {
      const minutesLeft = Math.round(timeUntilExpiry / 1000 / 60);
      if (minutesLeft % 10 === 0 || minutesLeft <= 5) { // Log toutes les 10 min ou les 5 derni√®res
        console.log(`üïê Session expire dans: ${minutesLeft} minutes`);
      }
    }

    // ‚úÖ Session expir√©e (avec marge de s√©curit√© de 30 secondes)
    if (timeUntilExpiry <= -30000) {
      handleSessionExpired();
      return;
    }

    // ‚úÖ Avertissement avant expiration
    const warningTime = warningMinutes * 60 * 1000;
    if (timeUntilExpiry <= warningTime && timeUntilExpiry > 0) {
      handleSessionWarning();
    } else if (timeUntilExpiry > warningTime) {
      // Reset warning si on est loin de l'expiration
      warningShown.current = false;
    }
  }, [session, status, handleSessionExpired, handleSessionWarning, warningMinutes]);

  // ‚úÖ Surveillance p√©riodique SIMPLIFI√âE
  useEffect(() => {
    // ‚úÖ Ne d√©marrer que si vraiment connect√© et activ√©
    if (!enabled || status !== "authenticated" || !session) {
      // ‚úÖ Nettoyer l'intervalle si conditions pas remplies
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      return;
    }

    // ‚úÖ √âviter les multiples intervalles
    if (intervalRef.current) {
      return;
    }

    console.log("üü¢ D√©marrage de la surveillance de session");

    // V√©rification imm√©diate
    checkSessionValidity();

    // ‚úÖ Intervalle moins fr√©quent et plus s√ªr
    intervalRef.current = setInterval(() => {
      // ‚úÖ Double v√©rification avant chaque check
      if (status === "authenticated" && session && !isHandlingExpiration.current) {
        checkSessionValidity();
      }
    }, checkInterval);

    return () => {
      if (intervalRef.current) {
        console.log("üü° Arr√™t de la surveillance de session");
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [enabled, status, session, checkInterval, checkSessionValidity]);

  // ‚úÖ Surveillance des changements de visibilit√© SIMPLIFI√âE
  useEffect(() => {
    if (!enabled || status !== "authenticated") {
      return;
    }

    const handleVisibilityChange = () => {
      if (!document.hidden && status === "authenticated" && !isHandlingExpiration.current) {
        console.log("üîÑ Onglet redevenu visible - v√©rification de session");
        // ‚úÖ Petit d√©lai pour √©viter les conflits
        setTimeout(() => {
          checkSessionValidity();
        }, 1000);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [enabled, status, checkSessionValidity]);

  // ‚úÖ Surveillance du storage SIMPLIFI√âE ET S√âCURIS√âE
  useEffect(() => {
    if (!enabled) return;

    const handleStorageChange = (e: StorageEvent) => {
      // ‚úÖ V√©rifications plus strictes
      if (e.key !== "nextauth.message" || !e.newValue || isHandlingExpiration.current) {
        return;
      }

      try {
        const message = JSON.parse(e.newValue);
        
        // ‚úÖ V√©rifier que c'est vraiment un √©v√©nement de d√©connexion
        if (message.event === "session" && message.session === null && status === "authenticated") {
          console.log("üî¥ D√©connexion d√©tect√©e depuis un autre onglet");
          
          // ‚úÖ D√©lai pour √©viter les conflits avec l'onglet qui a d√©clench√© la d√©connexion
          setTimeout(() => {
            if (status === "authenticated") { // Double v√©rification
              handleSessionExpired();
            }
          }, 500);
        }
      } catch (error) {
        // ‚úÖ Erreur silencieuse, pas besoin de log
      }
    };

    window.addEventListener("storage", handleStorageChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
    };
  }, [enabled, handleSessionExpired, status]);

  // ‚úÖ Fonction de nettoyage au d√©montage
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      isHandlingExpiration.current = false;
      warningShown.current = false;
    };
  }, []);

  return {
    isSessionValid: status === "authenticated" && 
                   session?.expires && 
                   new Date(session.expires).getTime() > Date.now() &&
                   !isHandlingExpiration.current,
    session,
    status,
    isExpiring: isHandlingExpiration.current
  };
}