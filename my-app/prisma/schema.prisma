// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agrement {
  id             Int      @id @default(autoincrement())
  departement    String   // Ex: "59", "62", "Nord", etc.
  numeroAgrement String   @unique // Ex: "R2305900010"
  nomDepartement String?  // Nom complet du d√©partement (optionnel)
  createdAt      DateTime @default(now())
  
  // Relation avec les stages
  stages         Stage[]
}

model Stage {
  id             Int      @id @default(autoincrement())
  Titre          String
  Adresse         String
  CodePostal     String
  Ville           String
  PlaceDisponibles Int
  // Plage de dates (d√©but et fin)
  DateDebut      DateTime
  DateFin        DateTime
  // Plage horaire (stock√©e en cha√Æne ou sous forme de DateTime si tu pr√©f√®res inclure une date fictive)
  NumeroStage     String @default("")
  HeureDebut      String
  HeureFin        String
  HeureDebut2 String @default("08:00")
  HeureFin2   String @default("18:00")
  Prix          Float
  createdAt      DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt  // ‚úÖ AJOUT de @default(now())
  hidden           Boolean  @default(false) // ‚úÖ NOUVEAU CHAMP
  completionNotificationSent Boolean  @default(false)
  
  // Nouvelle relation vers Agrement
  agrementId     Int?
  agrement       Agrement? @relation(fields: [agrementId], references: [id])
  
  reservations Reservation[]
}

model User {
  id             Int      @id @default(autoincrement())
  // Anciens champs
  name           String?  
  email          String   @unique
  password       String
  role           String   @default("client")
  
  // Nouveaux champs avec valeurs par d√©faut
  firstName      String   @default("√Ä compl√©ter") // Pr√©nom
  lastName       String   @default("√Ä compl√©ter") // Nom
  gender         String   @default("male")        // Genre par d√©faut
  birthDate      DateTime @default(now())         // Date actuelle temporaire
  birthPlace     String   @default("√Ä compl√©ter") // Lieu de naissance
  address1       String   @default("√Ä compl√©ter") // Adresse 1
  postalCode     String   @default("00000")       // Code postal
  city           String   @default("√Ä compl√©ter") // Ville
  phone1         String   @default("0000000000")  // T√©l√©phone
  permitNumber   String   @default("√Ä compl√©ter") // Num√©ro permis
  permitIssuedAt String   @default("√Ä compl√©ter") // Lieu d'obtention
  permitDate     DateTime @default(now())         // Date actuelle temporaire
  username       String   @unique // Tu peux ajouter une logique pour g√©n√©rer le pseudo si besoin
  country        String?  // Pays

  // üÜï NOUVEAUX CHAMPS POUR L'ADRESSE DE FACTURATION
  useSameAddressForBilling Boolean @default(true)        // Utiliser la m√™me adresse pour la facturation
  billingAddress1          String? // Adresse de facturation 1
  billingAddress2          String? // Adresse de facturation 2  
  billingAddress3          String? // Adresse de facturation 3
  billingPostalCode        String? // Code postal de facturation
  billingCity              String? // Ville de facturation
  billingCountry           String? // Pays de facturation

  // üÜï NOUVEAUX CHAMPS POUR LE PERMIS
  permitDocumentUploaded   Boolean @default(false)       // Document de permis t√©l√©charg√©
  permitDocumentVerified   Boolean @default(false)       // Document v√©rifi√© par admin
  permitNotificationSent   DateTime? // Derni√®re notification envoy√©e
  profileCompleted         Boolean @default(false)       // Profil compl√©t√©

  resetToken   String?  // Token de r√©initialisation de mot de passe
  resetTokenExp  DateTime? // Date d'expiration du token de r√©initialisation 
  // Champs optionnels (pas besoin de default)
  address2       String?  
  address3       String?  
  phone2         String?  

  // M√©tadonn√©es
  createdAt      DateTime @default(now())
  emailVerified  DateTime?
  image          String?
  acceptTerms   Boolean @default(false) // Champ pour accepter les CGU
  acceptRules   Boolean  @default(false) // Acceptation du r√®glement int√©rieur
  confirmPointsCheck Boolean @default(false) // V√©rification des points
  
  // Relations vers les autres mod√®les NextAuth
  accounts       Account[]
  sessions       Session[]
  reservations   Reservation[]
  invoices       Invoice[]
  permitDocuments PermitDocument[] // üÜï Relation vers les documents de permis
  notifications  Notification[]   // üÜï Relation vers les notifications
}

// üÜï NOUVEAU MOD√àLE : Documents de permis
model PermitDocument {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fileName      String   // Nom du fichier original
  filePath      String   // Chemin du fichier stock√©
  fileType      String   // Type MIME (application/pdf, image/jpeg, etc.)
  fileSize      Int      // Taille du fichier en octets
  
  // Informations extraites du document
  extractedData Json?    // Donn√©es extraites par OCR/analyse
  
  // Statut de v√©rification
  status        String   @default("pending") // pending, verified, rejected
  adminComments String?  // Commentaires de l'admin
  verifiedBy    Int?     // ID de l'admin qui a v√©rifi√©
  verifiedAt    DateTime? // Date de v√©rification
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// üÜï NOUVEAU MOD√àLE : Notifications
model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String   // permit_reminder, document_verified, etc.
  title       String   // Titre de la notification
  message     String   @db.Text // Contenu de la notification
  
  read        Boolean  @default(false) // Lu ou non lu
  emailSent   Boolean  @default(false) // Email envoy√© ou non
  
  createdAt   DateTime @default(now())
  readAt      DateTime? // Date de lecture
  
  @@index([userId, read])
  @@index([type])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  // Relation vers le User personnalis√©
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  // Relation vers le User personnalis√©
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id        Int      @id @default(autoincrement())
  userId    Int
  stageId   Int
  createdAt DateTime @default(now())
  TypeStage   String @default("stage") // Type de r√©servation (stage, cours, etc.)

  paymentMethod String @default("card") // Valeurs possibles: "card", "check", "cash", "transfer"
  paid       Boolean  @default(false)   // Pour indiquer si le paiement a √©t√© effectu√©
  // Relations
  user  User  @relation(fields: [userId],  references: [id])
  stage Stage @relation(fields: [stageId], references: [id])
  @@unique([userId, stageId]) // optionnel : un m√™me user ne peut r√©server deux fois le m√™me stage
  Invoice Invoice[]
}

model Invoice {
  id                Int      @id @default(autoincrement())
  invoiceNumber     String   @unique
  amount            Float
  currency          String   @default("EUR")
  status            String   @default("paid") // paid, pending, cancelled
  customerEmail     String
  customerName      String
  stripePaymentId   String?
  pdfData           Bytes?   // Stockage du PDF en base
  createdAt         DateTime @default(now())
  dueDate           DateTime
  
  // Relations
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  reservationId     Int?
  reservation       Reservation? @relation(fields: [reservationId], references: [id])
  
  @@index([invoiceNumber])
  @@index([customerEmail])
}

model contact {
  id        Int      @id @default(autoincrement())
  nom       String
  prenom    String
  email     String
  telephone String
  message   String   @db.Text
  createdAt DateTime @default(now())
}