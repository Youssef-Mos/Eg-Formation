// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stage {
  id             Int      @id @default(autoincrement())
  Titre          String
  Adresse         String
  CodePostal     String
  Ville           String
  PlaceDisponibles Int
  // Plage de dates (début et fin)
  DateDebut      DateTime
  DateFin        DateTime
  // Plage horaire (stockée en chaîne ou sous forme de DateTime si tu préfères inclure une date fictive)
  HeureDebut      String
  HeureFin        String
  Prix          Float
  createdAt      DateTime @default(now())
}

model User {
  id             Int      @id @default(autoincrement())
  // Anciens champs
  name           String?  
  email          String   @unique
  password       String
  role           String   @default("client")
  
  // Nouveaux champs avec valeurs par défaut
  firstName      String   @default("À compléter") // Prénom
  lastName       String   @default("À compléter") // Nom
  gender         String   @default("male")        // Genre par défaut
  birthDate      DateTime @default(now())         // Date actuelle temporaire
  birthPlace     String   @default("À compléter") // Lieu de naissance
  address1       String   @default("À compléter") // Adresse 1
  postalCode     String   @default("00000")       // Code postal
  city           String   @default("À compléter") // Ville
  phone1         String   @default("0000000000")  // Téléphone
  permitNumber   String   @default("À compléter") // Numéro permis
  permitIssuedAt String   @default("À compléter") // Lieu d'obtention
  permitDate     DateTime @default(now())         // Date actuelle temporaire
  username       String   @unique // Tu peux ajouter une logique pour générer le pseudo si besoin

  // Champs optionnels (pas besoin de default)
  address2       String?  
  address3       String?  
  phone2         String?  

  // Métadonnées
  createdAt      DateTime @default(now())
  emailVerified  DateTime?
  image          String?

  // Relations vers les autres modèles NextAuth
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  // Relation vers le User personnalisé
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  // Relation vers le User personnalisé
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
